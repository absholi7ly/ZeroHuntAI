import re

def get_vulnerability_patterns():

    patterns = {
        # Python-specific patterns
        'py': [
            {
                'type': 'Command Execution',
                'pattern': r'(?:os\.system|os\.popen|subprocess\.Popen|subprocess\.call|subprocess\.run|exec|eval)\s*\(',
                'description': 'Potentially dangerous command execution',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-78',
                'exploit_example': 'An attacker could inject shell commands by manipulating input variables that are passed to these functions without sanitization.'
            },
            {
                'type': 'SQL Injection',
                'pattern': r'(execute|executemany)\s*\(\s*[f"]',
                'description': 'Possible SQL injection using string formatting in query',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-89',
                'exploit_example': 'By manipulating input like "username = \'; DROP TABLE users; --", an attacker could execute arbitrary SQL commands on the database.'
            },
            {
                'type': 'Path Traversal',
                'pattern': r'open\s*\(\s*(?:[a-zA-Z_][a-zA-Z0-9_]*|\(?[a-zA-Z_][a-zA-Z0-9_]*\s*\+)',
                'description': 'Potential path traversal in file operations',
                'default_severity': 'Medium',
                'confidence': 'Low',
                'cwe': 'CWE-22',
                'exploit_example': 'By using "../" sequences in a filename parameter, an attacker could potentially access files outside the intended directory.'
            },
            {
                'type': 'Hard-coded Credentials',
                'pattern': r'(?:password|passwd|pwd|token|secret|api_key|apikey)\s*=\s*["\'][^"\']+["\']',
                'description': 'Hard-coded credential',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-798',
                'exploit_example': 'Credentials in source code could be extracted from repositories or decompiled applications, giving attackers direct access to services.'
            },
            {
                'type': 'Insecure Deserialization',
                'pattern': r'pickle\.loads|yaml\.load\s*\(',
                'description': 'Insecure deserialization',
                'default_severity': 'High',
                'confidence': 'High',
                'cwe': 'CWE-502',
                'exploit_example': 'An attacker could craft a malicious pickle or YAML payload that executes arbitrary code when deserialized.'
            },
            {
                'type': 'Flask Debug Mode',
                'pattern': r'app\.run\(.*(debug\s*=\s*True)',
                'description': 'Flask application running in debug mode',
                'default_severity': 'Medium',
                'confidence': 'High',
                'cwe': 'CWE-215',
                'exploit_example': 'Debug mode exposes a console that could allow attackers to execute arbitrary Python code on the server.'
            },
            {
                'type': 'Weak Cryptography',
                'pattern': r'(?:hashlib\.md5|hashlib\.sha1)\(',
                'description': 'Use of weak cryptographic hash functions',
                'default_severity': 'Medium',
                'confidence': 'Medium',
                'cwe': 'CWE-327',
                'exploit_example': 'MD5 and SHA1 are vulnerable to collision attacks, allowing attackers to forge credentials or signatures.'
            },
            {
                'type': 'Sensitive Data Exposure',
                'pattern': r'(?:\.write|print)\s*\(\s*(?:password|secret|token|key)',
                'description': 'Potentially logging or printing sensitive data',
                'default_severity': 'Medium',
                'confidence': 'Medium',
                'cwe': 'CWE-532',
                'exploit_example': 'Sensitive data in logs could be exposed to unauthorized personnel or be found in log files by attackers.'
            },
            {
                'type': 'SSRF',
                'pattern': r'(?:requests\.|urllib\.request\.|http\.client\.).*(get|post|put|delete|patch|head)',
                'description': 'Potential Server-Side Request Forgery',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-918',
                'exploit_example': 'By supplying a URL pointing to internal resources, an attacker could make the server request internal endpoints not intended for external access.'
            }
        ],
        
        # JavaScript-specific patterns
        'js': [
            {
                'type': 'XSS',
                'pattern': r'(?:innerHTML|outerHTML|document\.write|document\.writeln|eval)\s*\(',
                'description': 'Potential XSS vulnerability',
                'default_severity': 'Medium',
                'confidence': 'Medium',
                'cwe': 'CWE-79',
                'exploit_example': 'An attacker could inject JavaScript code that executes in users\' browsers by manipulating inputs that are inserted into the DOM using these methods.'
            },
            {
                'type': 'Command Execution',
                'pattern': r'(?:eval|Function|setTimeout|setInterval)\s*\(\s*(?:[a-zA-Z_][a-zA-Z0-9_]*|\(?[a-zA-Z_][a-zA-Z0-9_]*\s*\+)',
                'description': 'Dynamically evaluated code',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-94',
                'exploit_example': 'An attacker could inject and execute arbitrary JavaScript by manipulating the string passed to these functions.'
            },
            {
                'type': 'Hard-coded Credentials',
                'pattern': r'(?:password|token|secret|apiKey|api_key)\s*(?:=|:)\s*["\'][^"\']+["\']',
                'description': 'Hard-coded credential',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-798',
                'exploit_example': 'Credentials in client-side code could be easily extracted by looking at the source code, giving attackers direct access to services.'
            },
            {
                'type': 'Insecure Randomness',
                'pattern': r'Math\.random\(\)',
                'description': 'Insecure random number generation',
                'default_severity': 'Low',
                'confidence': 'Medium',
                'cwe': 'CWE-338',
                'exploit_example': 'Math.random() is not cryptographically secure and could lead to predictable values for tokens or security-relevant features.'
            },
            {
                'type': 'DOM-based XSS',
                'pattern': r'(?:location|document\.URL|document\.documentURI|document\.URLUnencoded|document\.baseURI|document\.referrer)\s*(?:\[|\.|\.valueOf)',
                'description': 'Potential DOM-based XSS source',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-79',
                'exploit_example': 'An attacker could craft URLs that, when accessed, cause the page to execute malicious JavaScript via DOM manipulation.'
            },
            {
                'type': 'Prototype Pollution',
                'pattern': r'Object\.assign\s*\(\s*[^,]+,\s*(?:[a-zA-Z_][a-zA-Z0-9_]*)',
                'description': 'Potential prototype pollution',
                'default_severity': 'Medium',
                'confidence': 'Low',
                'cwe': 'CWE-915',
                'exploit_example': 'By manipulating input objects, an attacker could potentially pollute Object.prototype, affecting all objects in the application.'
            },
            {
                'type': 'JWT Without Verification',
                'pattern': r'jwt\.(?:decode|verify)\s*\(',
                'description': 'Potential JWT usage without proper verification',
                'default_severity': 'High',
                'confidence': 'Low',
                'cwe': 'CWE-347',
                'exploit_example': 'If JWTs are decoded without signature verification, attackers could forge authentication tokens.'
            },
            {
                'type': 'postMessage Origin Check',
                'pattern': r'addEventListener\s*\(\s*[\'"]message[\'"]\s*,',
                'description': 'Check for proper origin validation in postMessage handlers',
                'default_severity': 'Medium',
                'confidence': 'Low',
                'cwe': 'CWE-346',
                'exploit_example': 'Without proper origin checking in message event handlers, cross-origin attacks could be possible through postMessage.'
            }
        ],
        
        # PHP-specific patterns
        'php': [
            {
                'type': 'Command Execution',
                'pattern': r'(?:system|exec|shell_exec|passthru|proc_open|popen|eval)\s*\(',
                'description': 'Dangerous PHP function execution',
                'default_severity': 'High',
                'confidence': 'High',
                'cwe': 'CWE-78',
                'exploit_example': 'An attacker could execute arbitrary system commands by manipulating input that is passed to these functions.'
            },
            {
                'type': 'SQL Injection',
                'pattern': r'mysqli_query\s*\(\s*\$[a-zA-Z0-9_]*\s*,\s*(?:["\'](?:SELECT|INSERT|UPDATE|DELETE)|\$)',
                'description': 'Potential SQL injection',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-89',
                'exploit_example': 'An attacker could execute arbitrary SQL commands by injecting SQL syntax into inputs used in database queries.'
            },
            {
                'type': 'XSS',
                'pattern': r'echo\s+\$_(?:GET|POST|REQUEST|COOKIE)',
                'description': 'Unfiltered output of user input',
                'default_severity': 'Medium',
                'confidence': 'Medium',
                'cwe': 'CWE-79',
                'exploit_example': 'By submitting forms with JavaScript code, attackers could execute scripts in users\' browsers when the data is echoed without sanitization.'
            },
            {
                'type': 'File Inclusion',
                'pattern': r'(?:include|require|include_once|require_once)\s*\(\s*\$',
                'description': 'Dynamic file inclusion',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-98',
                'exploit_example': 'An attacker could include malicious files or access sensitive files by manipulating variables used in include statements.'
            },
            {
                'type': 'Insecure File Upload',
                'pattern': r'move_uploaded_file\s*\(',
                'description': 'Check for proper file upload validation',
                'default_severity': 'Medium',
                'confidence': 'Low',
                'cwe': 'CWE-434',
                'exploit_example': 'Without proper validation of file types and content, attackers could upload malicious files (like PHP shells) to the server.'
            },
            {
                'type': 'Session Fixation',
                'pattern': r'session_id\s*\(\s*\$',
                'description': 'Potential session fixation vulnerability',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-384',
                'exploit_example': 'An attacker could set a victim\'s session ID to a known value, then wait for the victim to authenticate, giving the attacker access to their account.'
            },
            {
                'type': 'Object Injection',
                'pattern': r'unserialize\s*\(\s*\$',
                'description': 'Potential PHP object injection',
                'default_severity': 'High',
                'confidence': 'High',
                'cwe': 'CWE-502',
                'exploit_example': 'By manipulating serialized objects, attackers could exploit magic methods to execute arbitrary code when PHP unserializes the data.'
            }
        ],
        
        # Java-specific patterns
        'java': [
            {
                'type': 'Command Execution',
                'pattern': r'(?:Runtime\.getRuntime\(\)\.exec|ProcessBuilder)',
                'description': 'Command execution',
                'default_severity': 'High',
                'confidence': 'High',
                'cwe': 'CWE-78',
                'exploit_example': 'An attacker could inject shell commands by manipulating input variables passed to these methods without proper validation.'
            },
            {
                'type': 'SQL Injection',
                'pattern': r'executeQuery\s*\(\s*["\']SELECT|executeUpdate\s*\(\s*["\'](?:INSERT|UPDATE|DELETE)',
                'description': 'Potential SQL injection',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-89',
                'exploit_example': 'An attacker could execute arbitrary SQL by manipulating inputs concatenated into query strings.'
            },
            {
                'type': 'XSS',
                'pattern': r'response\.getWriter\(\)\.print\s*\(',
                'description': 'Potential XSS vulnerability',
                'default_severity': 'Medium',
                'confidence': 'Low',
                'cwe': 'CWE-79',
                'exploit_example': 'Outputting user-controlled data without encoding could allow attackers to inject JavaScript into web pages.'
            },
            {
                'type': 'Hard-coded Credentials',
                'pattern': r'(?:password|credentials|secret|apiKey|token)\s*=\s*["\'][^"\']+["\']',
                'description': 'Hard-coded credential',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-798',
                'exploit_example': 'Hard-coded credentials could be extracted from decompiled class files or source code repositories.'
            },
            {
                'type': 'Path Traversal',
                'pattern': r'new\s+File\s*\([^,)]+\s*\+',
                'description': 'Potential path traversal vulnerability',
                'default_severity': 'Medium',
                'confidence': 'Medium',
                'cwe': 'CWE-22',
                'exploit_example': 'By including "../" sequences in parameters, attackers could potentially access files outside the intended directory.'
            },
            {
                'type': 'XXE',
                'pattern': r'(?:SAXParser|DocumentBuilder|XMLReader)',
                'description': 'Potential XML External Entity (XXE) vulnerability',
                'default_severity': 'High',
                'confidence': 'Low',
                'cwe': 'CWE-611',
                'exploit_example': 'Without proper configuration to disable external entities, XML parsers could be exploited to access local files or perform SSRF.'
            },
            {
                'type': 'Insecure Deserialization',
                'pattern': r'(?:ObjectInputStream|readObject)',
                'description': 'Potential insecure deserialization',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-502',
                'exploit_example': 'Deserializing untrusted data can lead to remote code execution if the class has dangerous methods that are called during deserialization.'
            },
            {
                'type': 'Weak Cryptography',
                'pattern': r'(?:MD5|SHA1)(?:\.getInstance|\.digest)',
                'description': 'Use of weak cryptographic algorithms',
                'default_severity': 'Medium',
                'confidence': 'High',
                'cwe': 'CWE-327',
                'exploit_example': 'MD5 and SHA1 are vulnerable to collision attacks, allowing attackers to forge digests of different content that produce the same hash.'
            }
        ],
        
        # C/C++-specific patterns
        'c': [
            {
                'type': 'Buffer Overflow',
                'pattern': r'(?:strcpy|strcat|sprintf|gets)\s*\(',
                'description': 'Potentially vulnerable function',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-120',
                'exploit_example': 'These functions don\'t check buffer boundaries. An attacker could send input larger than the buffer size, overwriting adjacent memory and potentially executing arbitrary code.'
            },
            {
                'type': 'Format String',
                'pattern': r'printf\s*\(\s*(?:[a-zA-Z_][a-zA-Z0-9_]*)',
                'description': 'Potential format string vulnerability',
                'default_severity': 'Medium',
                'confidence': 'Low',
                'cwe': 'CWE-134',
                'exploit_example': 'If an attacker controls a format string with specifiers like %s or %n, they could read from or write to arbitrary memory locations.'
            },
            {
                'type': 'Command Execution',
                'pattern': r'(?:system|popen|exec)\s*\(',
                'description': 'Command execution',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-78',
                'exploit_example': 'An attacker could inject shell commands by manipulating input passed to these functions without proper validation.'
            },
            {
                'type': 'Memory Management',
                'pattern': r'malloc\s*\([^)]+\)(?!.*free)',
                'description': 'Potential memory leak',
                'default_severity': 'Medium',
                'confidence': 'Low',
                'cwe': 'CWE-401',
                'exploit_example': 'Memory leaks can lead to denial of service by exhausting available memory, causing the application to crash or become unresponsive.'
            },
            {
                'type': 'Integer Overflow',
                'pattern': r'(?:malloc|alloca)\s*\(\s*[a-zA-Z_][a-zA-Z0-9_]*\s*\*',
                'description': 'Potential integer overflow in memory allocation',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-190',
                'exploit_example': 'By manipulating values used in calculations for memory allocation, an attacker could cause integer overflow, potentially leading to buffer overflow or heap corruption.'
            },
            {
                'type': 'Use After Free',
                'pattern': r'free\s*\(\s*[a-zA-Z_][a-zA-Z0-9_]*\s*\)',
                'description': 'Check for potential use-after-free vulnerabilities',
                'default_severity': 'High',
                'confidence': 'Low',
                'cwe': 'CWE-416',
                'exploit_example': 'If memory is referenced after being freed, attackers might exploit the vulnerability to execute arbitrary code by manipulating how memory is reallocated.'
            },
            {
                'type': 'NULL Pointer Dereference',
                'pattern': r'(?:[a-zA-Z_][a-zA-Z0-9_]*\s*(?:->|\.)\s*[a-zA-Z_][a-zA-Z0-9_]*)',
                'description': 'Potential NULL pointer dereference',
                'default_severity': 'Medium',
                'confidence': 'Low',
                'cwe': 'CWE-476',
                'exploit_example': 'Dereferencing NULL pointers can cause program crashes (denial of service) or potentially lead to more severe vulnerabilities in certain contexts.'
            }
        ],
        
        # C++ patterns
        'cpp': [
            {
                'type': 'Buffer Overflow',
                'pattern': r'(?:strcpy|strcat|sprintf|gets)\s*\(',
                'description': 'Potentially vulnerable function',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-120',
                'exploit_example': 'These C-style functions don\'t check buffer boundaries. An attacker could send input larger than the buffer size, causing memory corruption.'
            },
            {
                'type': 'Command Execution',
                'pattern': r'(?:system|popen|exec)\s*\(',
                'description': 'Command execution',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-78',
                'exploit_example': 'An attacker could inject shell commands by manipulating input passed to these functions.'
            },
            {
                'type': 'Uninitialized Variable',
                'pattern': r'(?:char|int|float|double|long)\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*;',
                'description': 'Potential uninitialized variable',
                'default_severity': 'Low',
                'confidence': 'Low',
                'cwe': 'CWE-457',
                'exploit_example': 'Uninitialized variables contain unpredictable values from memory, which could leak sensitive information or cause unpredictable behavior.'
            },
            {
                'type': 'Use of Dangerous Function',
                'pattern': r'reinterpret_cast<',
                'description': 'Use of potentially dangerous reinterpret_cast',
                'default_severity': 'Medium',
                'confidence': 'Medium',
                'cwe': 'CWE-843',
                'exploit_example': 'Improper type casting can lead to memory corruption and potential code execution vulnerabilities.'
            },
            {
                'type': 'Memory Management',
                'pattern': r'new\s+[a-zA-Z_][a-zA-Z0-9_:]*(?:\[|\()',
                'description': 'Check for corresponding delete statements',
                'default_severity': 'Medium',
                'confidence': 'Low',
                'cwe': 'CWE-401',
                'exploit_example': 'Memory leaks can accumulate over time and cause the application to exhaust available memory, resulting in crashes.'
            }
        ],
        
        # Go-specific patterns
        'go': [
            {
                'type': 'Command Execution',
                'pattern': r'(?:exec\.Command|os\.Exec)',
                'description': 'Command execution',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-78',
                'exploit_example': 'An attacker could inject shell commands if user input is passed to these functions without sanitization.'
            },
            {
                'type': 'SQL Injection',
                'pattern': r'(?:db\.Query|db\.Exec)\s*\(\s*[^?]',
                'description': 'Potential SQL injection (non-parameterized query)',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-89',
                'exploit_example': 'Without using prepared statements (?, placeholders), attackers could inject SQL commands through manipulated input.'
            },
            {
                'type': 'Hard-coded Credentials',
                'pattern': r'(?:password|token|secret|apiKey|api_key)\s*(?::=|=)\s*["\'][^"\']+["\']',
                'description': 'Hard-coded credential',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-798',
                'exploit_example': 'Hard-coded credentials in source code could be extracted, giving attackers direct access to services.'
            },
            {
                'type': 'Insecure Random',
                'pattern': r'(?:math/rand)',
                'description': 'Use of non-cryptographic random number generator',
                'default_severity': 'Medium',
                'confidence': 'Medium',
                'cwe': 'CWE-338',
                'exploit_example': 'The math/rand package uses a predictable algorithm, making it unsuitable for security-sensitive operations like token generation.'
            },
            {
                'type': 'Path Traversal',
                'pattern': r'(?:os\.Open|ioutil\.ReadFile)\s*\(',
                'description': 'Potential path traversal vulnerability',
                'default_severity': 'Medium',
                'confidence': 'Low',
                'cwe': 'CWE-22',
                'exploit_example': 'If user input is used in file paths without sanitization, attackers could use "../" sequences to access sensitive files.'
            }
        ],
        
        # Ruby-specific patterns
        'rb': [
            {
                'type': 'Command Injection',
                'pattern': r'(?:system|exec|`|\%x|\%Q|Open3)',
                'description': 'Potential command injection',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-78',
                'exploit_example': 'An attacker could inject shell commands if user input is passed to these methods without sanitization.'
            },
            {
                'type': 'SQL Injection',
                'pattern': r'(?:\.execute|\.query|\.select|\.update|\.delete).*\+',
                'description': 'Potential SQL injection in Ruby',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-89',
                'exploit_example': 'String concatenation in SQL queries could allow attackers to inject and execute arbitrary SQL commands.'
            },
            {
                'type': 'Mass Assignment',
                'pattern': r'\.update\(params\[:[a-zA-Z_]+\]\)',
                'description': 'Potential mass assignment vulnerability',
                'default_severity': 'Medium',
                'confidence': 'Medium',
                'cwe': 'CWE-915',
                'exploit_example': 'Without proper attribute filtering, attackers could update protected attributes like admin flags or passwords.'
            }
        ],
        
        # Configuration file patterns
        'config': [
            {
                'type': 'Sensitive Data in Config',
                'pattern': r'(?:password|passwd|pwd|secret|api[-_]?key|apikey|token|auth|credential)[\s=:]+["\'][^"\']+["\']',
                'description': 'Sensitive data in configuration file',
                'default_severity': 'High',
                'confidence': 'High',
                'cwe': 'CWE-260',
                'exploit_example': 'Credentials in configuration files could be extracted by anyone with access to the repository or filesystem.'
            },
            {
                'type': 'Insecure Permission',
                'pattern': r'(?:chmod|permission).*(?:777|666|0777|0666)',
                'description': 'Overly permissive file permissions',
                'default_severity': 'Medium',
                'confidence': 'Medium',
                'cwe': 'CWE-732',
                'exploit_example': 'World-writable permissions allow any user on the system to modify files, potentially leading to privilege escalation.'
            }
        ],
        
        # Docker-specific patterns
        'docker': [
            {
                'type': 'Privileged Container',
                'pattern': r'privileged:\s*true',
                'description': 'Docker container running in privileged mode',
                'default_severity': 'High',
                'confidence': 'High',
                'cwe': 'CWE-250',
                'exploit_example': 'Privileged containers have full access to the host, allowing attackers who compromise the container to escape and access the host system.'
            },
            {
                'type': 'Root User',
                'pattern': r'USER\s+root',
                'description': 'Docker container running as root user',
                'default_severity': 'Medium',
                'confidence': 'High',
                'cwe': 'CWE-250',
                'exploit_example': 'Running as root inside containers increases the impact of vulnerabilities, as exploits execute with root privileges.'
            }
        ],
        
        # Generic patterns for all languages
        'generic': [
            {
                'type': 'Hard-coded Credentials',
                'pattern': r'(?:password|passwd|pwd|token|secret|api[-_]?key|apikey|auth|credentials)\s*(?:=|:)\s*["\'][^"\']{3,}["\']',
                'description': 'Hard-coded credential',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-798',
                'exploit_example': 'Hard-coded credentials could be extracted from source code, giving attackers direct access to services.'
            },
            {
                'type': 'Information Disclosure',
                'pattern': r'(?:TODO|FIXME|XXX|BUG|HACK).*(?:security|vulnerability|credentials|password|token)',
                'description': 'Security-related TODO/FIXME comment',
                'default_severity': 'Low',
                'confidence': 'Low',
                'cwe': 'CWE-546',
                'exploit_example': 'Comments may reveal vulnerabilities, incomplete security features, or implementation details useful to attackers.'
            },
            {
                'type': 'IP Address/Domain',
                'pattern': r'(?:https?://|\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b)',
                'description': 'Hard-coded IP address or URL',
                'default_severity': 'Low',
                'confidence': 'Low',
                'cwe': 'CWE-200',
                'exploit_example': 'Hard-coded URLs might expose internal hostnames, IP addresses, or service endpoints not intended for public access.'
            },
            {
                'type': 'Cryptographic Key',
                'pattern': r'-----BEGIN\s+(?:RSA|DSA|EC|OPENSSH)\s+PRIVATE\s+KEY-----',
                'description': 'Private key in source code',
                'default_severity': 'Critical',
                'confidence': 'High',
                'cwe': 'CWE-798',
                'exploit_example': 'Private keys in source code could be used by attackers to decrypt sensitive data or authenticate as the application.'
            },
            {
                'type': 'Sensitive Data',
                'pattern': r'\b(?:social security|credit card|card number|security code|cvv|routing number|bank account|passport|license number)\b',
                'description': 'Potential sensitive personal data references',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-200',
                'exploit_example': 'References to sensitive data patterns may indicate unprotected storage or transmission of PII.'
            },
            {
                'type': 'Weak Encryption',
                'pattern': r'\b(?:DES|RC4|MD5|SHA-?1)\b',
                'description': 'Use of weak/deprecated encryption algorithm',
                'default_severity': 'Medium',
                'confidence': 'Medium',
                'cwe': 'CWE-327',
                'exploit_example': 'These algorithms have known vulnerabilities that can be exploited to decrypt data or forge cryptographic signatures.'
            },
            {
                'type': 'JWT Secret',
                'pattern': r'(?:jwt|token|sign).*secret',
                'description': 'Potential JWT signing secret',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-798',
                'exploit_example': 'JWT signing secrets could be used to forge authentication tokens, allowing unauthorized access to protected resources.'
            },
            {
                'type': 'Authorization Bypass',
                'pattern': r'(?:auth|authentication|authorization).*(?:bypass|disable|skip|mock)',
                'description': 'Potential authentication/authorization bypass',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-287',
                'exploit_example': 'Code that bypasses authentication or authorization could be exploited to gain unauthorized access to protected resources.'
            }
        ],
        
        # Sensitive information patterns (for scanning .env, config files, etc.)
        'sensitive_data': [
            {
                'type': 'AWS Key',
                'pattern': r'(?:AKIA[0-9A-Z]{16})',
                'description': 'Potential AWS access key',
                'default_severity': 'Critical',
                'confidence': 'High',
                'cwe': 'CWE-798',
                'exploit_example': 'AWS keys could be used to access and manipulate cloud resources, potentially leading to data breaches or service disruption.'
            },
            {
                'type': 'API Key',
                'pattern': r'(?:[a-zA-Z0-9_-]+[a-zA-Z0-9]{32,})',
                'description': 'Potential API key',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-798',
                'exploit_example': 'API keys could be used to make unauthorized calls to services, potentially accessing or modifying sensitive data.'
            },
            {
                'type': 'Private Key',
                'pattern': r'-----BEGIN\s+(?:RSA|DSA|EC|OPENSSH)\s+PRIVATE\s+KEY-----',
                'description': 'Private key detected',
                'default_severity': 'Critical',
                'confidence': 'High',
                'cwe': 'CWE-798',
                'exploit_example': 'Private keys could be used to decrypt sensitive data or authenticate as the application to other services.'
            },
            {
                'type': 'Password',
                'pattern': r'(?:password|passwd|pwd)[\s=:]+["\'][^"\']{3,}["\']',
                'description': 'Hard-coded password',
                'default_severity': 'High',
                'confidence': 'Medium',
                'cwe': 'CWE-798',
                'exploit_example': 'Hard-coded passwords could be extracted from source code or configuration files, giving attackers direct access to services.'
            },
            {
                'type': 'JWT Token',
                'pattern': r'eyJ[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*',
                'description': 'JWT token in code',
                'default_severity': 'Medium',
                'confidence': 'Medium',
                'cwe': 'CWE-200',
                'exploit_example': 'JWTs in source code may contain sensitive claims that could be decoded, potentially exposing user information or system details.'
            },
            {
                'type': 'Google API Key',
                'pattern': r'AIza[0-9A-Za-z-_]{35}',
                'description': 'Google API key',
                'default_severity': 'High',
                'confidence': 'High',
                'cwe': 'CWE-798',
                'exploit_example': 'Google API keys could be used to make unauthorized API calls, potentially incurring charges or accessing private data.'
            },
            {
                'type': 'GitHub Token',
                'pattern': r'(?:github|gh)[\s_.-](?:token|pat)[\s=:]+["\']([a-zA-Z0-9_]{40})["\']',
                'description': 'GitHub personal access token',
                'default_severity': 'Critical',
                'confidence': 'High',
                'cwe': 'CWE-798',
                'exploit_example': 'GitHub tokens could be used to access private repositories, modify code, or create malicious pull requests.'
            },
            {
                'type': 'Slack Token',
                'pattern': r'xox[pbar]-[0-9]{12}-[0-9]{12}-[0-9]{12}-[a-zA-Z0-9]{32}',
                'description': 'Slack API token',
                'default_severity': 'High',
                'confidence': 'High',
                'cwe': 'CWE-798',
                'exploit_example': 'Slack tokens could be used to access private messages, channels, or send messages impersonating users or bots.'
            },
            {
                'type': 'Stripe API Key',
                'pattern': r'(?:sk|pk)_(?:test|live)_[0-9a-zA-Z]{24}',
                'description': 'Stripe API key',
                'default_severity': 'Critical',
                'confidence': 'High',
                'cwe': 'CWE-798',
                'exploit_example': 'Stripe API keys, especially secret keys, could be used to make fraudulent charges or access customer payment information.'
            }
        ]
    }
    
    return patterns
